import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

logging.basicConfig(level=logging.INFO)

CITY, SALON, CONFIRM = range(3)

salon_data = {
    "‡§™‡§∞‡§≠‡§£‡•Ä": [
        {"name": "‡§ú‡§®‡§∏‡•á‡§µ‡§æ ‡§∏‡§≤‡•Ç‡§®", "phone": "9876543210"},
    ],
    "‡§®‡§æ‡§Ç‡§¶‡•á‡§°": [
        {"name": "‡§∏‡•ç‡§ü‡§æ‡§à‡§≤ ‡§π‡•á‡§Ö‡§∞ ‡§∏‡•ç‡§ü‡•Å‡§°‡§ø‡§ì", "phone": "9123456789"},
    ],
    "‡§π‡§ø‡§Ç‡§ó‡•ã‡§≤‡•Ä": [
        {"name": "‡§ù‡§ï‡§æ‡§∏ ‡§π‡•á‡§Ö‡§∞ ‡§∏‡•ç‡§ü‡§æ‡§à‡§≤", "phone": "9988776655"},
    ],
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞ {user.first_name}! üôè\n\nWelcome to *Book My Salon* üíá‚Äç‚ôÇÔ∏èüíÖ\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•Å‡§Æ‡§ö‡•á ‡§∂‡§π‡§∞ ‡§®‡§ø‡§µ‡§°‡§æ:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton(city)] for city in salon_data.keys()],
            one_time_keyboard=True,
            resize_keyboard=True
        ),
    )
    return CITY

async def select_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    context.user_data["city"] = city

    salons = salon_data.get(city, [])
    buttons = [[KeyboardButton(s["name"])] for s in salons]
    await update.message.reply_text(
        f"{city} ‡§Æ‡§ß‡•Ä‡§≤ ‡§∏‡§≤‡•Ç‡§® ‡§®‡§ø‡§µ‡§°‡§æ:",
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
    )
    return SALON

async def select_salon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    salon = update.message.text
    context.user_data["salon"] = salon
    city = context.user_data["city"]

    phone = next((s["phone"] for s in salon_data[city] if s["name"] == salon), "N/A")
    context.user_data["phone"] = phone

    await update.message.reply_text(
        f"‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä '{salon}' ‡§π‡•á ‡§∏‡§≤‡•Ç‡§® ‡§¨‡•Å‡§ï ‡§ï‡§∞‡•Ç ‡§á‡§ö‡•ç‡§õ‡§ø‡§§‡§æ ‡§ï‡§æ?\n‡§´‡•ã‡§®: {phone}",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("‡§π‡•ã"), KeyboardButton("‡§®‡§æ‡§π‡•Ä")]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return CONFIRM

async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‡§π‡•ã":
        salon = context.user_data["salon"]
        phone = context.user_data["phone"]
        await update.message.reply_text(
            f"‚úÖ ‡§§‡•Å‡§Æ‡§ö‡§Ç '{salon}' ‡§∏‡§≤‡•Ç‡§®‡§ö‡§Ç ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ù‡§æ‡§≤‡•á ‡§Ü‡§π‡•á!\nüìû ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡§æ: {phone}"
        )
    else:
        await update.message.reply_text("‚ùå ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ü‡§≤‡•á ‡§Ü‡§π‡•á.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üôè ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§≠‡•á‡§ü ‡§¶‡§ø‡§≤‡•ç‡§Ø‡§æ‡§¨‡§¶‡•ç‡§¶‡§≤ ‡§Ü‡§≠‡§æ‡§∞.")
    return ConversationHandler.END

def main():
    import os
    TOKEN = os.getenv("BOT_TOKEN")  # Render ‡§ï‡§ø‡§Ç‡§µ‡§æ GitHub ‡§∏‡§æ‡§†‡•Ä env variable ‡§µ‡§æ‡§™‡§∞

    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_city)],
            SALON: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_salon)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_booking)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
